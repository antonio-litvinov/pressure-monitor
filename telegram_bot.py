#!/usr/bin/env python3
"""
Telegram –±–æ—Ç "–¢–æ–Ω–æ–º–µ—Ç—Ä" –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Web App
"""

import os
import logging
import json
from datetime import datetime
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:8000/video_recorder.html')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
    print("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
    print("WEBAPP_URL=http://localhost:8000/video_recorder.html")
    exit(1)

class TonometerBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("measure", self.measure_command))
        self.application.add_handler(CommandHandler("history", self.status_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Web App –¥–∞–Ω–Ω—ã—Ö
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_webapp_data))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
    def get_persistent_keyboard(self):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç"""
        keyboard = [
            [
                KeyboardButton("ü©∫ –ò–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ", web_app=WebAppInfo(url=WEBAPP_URL)),
                KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")
            ]
        ]
        return ReplyKeyboardMarkup(
            keyboard, 
            resize_keyboard=True, 
            one_time_keyboard=False,
            is_persistent=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        try:
            await self.application.bot.delete_my_commands()
            logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥: {e}")
        
        welcome_text = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ–Ω–æ–º–µ—Ç—Ä!</b>

–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–∞–º–µ—Ä—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "ü©∫ –ò–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ"
2Ô∏è‚É£ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ  
3Ô∏è‚É£ –°–Ω–∏–º–∏—Ç–µ 10-—Å–µ–∫—É–Ω–¥–Ω–æ–µ –≤–∏–¥–µ–æ
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>

‚Ä¢ ü©∫ <b>–ò–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ</b> - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
‚Ä¢ üìä <b>–ò—Å—Ç–æ—Ä–∏—è</b> - –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è

<b>üöÄ –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>
        """
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode='HTML',
            reply_markup=self.get_persistent_keyboard()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} - {user.first_name} {user.last_name or ''}")
        
    async def measure_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /measure - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç Web App"""
        measure_text = """
ü©∫ <b>–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è</b>

–°–µ–π—á–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è Web App –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–∞–º–µ—Ä—ã.

<b>üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∏–∑–º–µ—Ä–µ–Ω–∏—é:</b>

‚Ä¢ üåü –ù–∞–π–¥–∏—Ç–µ —Ö–æ—Ä–æ—à–æ –æ—Å–≤–µ—â–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
‚Ä¢ üì± –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–º–µ—Ä–∞ —á–∏—Å—Ç–∞—è
‚Ä¢ üëÜ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –ø–∞–ª–µ—Ü –∏–ª–∏ –∑–∞–ø—è—Å—Ç—å–µ –¥–ª—è —Å—ä–µ–º–∫–∏
‚Ä¢ üòå –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –Ω–µ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å –≤–æ –≤—Ä–µ–º—è —Å—ä–µ–º–∫–∏

<b>‚è±Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b>

‚Ä¢ üé• –í–∏–¥–µ–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è 10 —Å–µ–∫—É–Ω–¥
‚Ä¢ ‚ö° –ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç 5-10 —Å–µ–∫—É–Ω–¥
‚Ä¢ üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∂–µ—Ç —Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –∏ –¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ

<b>üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>
        """
        
        await update.message.reply_text(
            measure_text, 
            parse_mode='HTML',
            reply_markup=self.get_persistent_keyboard()
        )
        
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–∑ –ë–î
        status_text = f"""
üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π</b>

<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {update.effective_user.first_name}
<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.now().strftime('%d.%m.%Y')}

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>

‚Ä¢ üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: <i>–ù–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å</i>
‚Ä¢ üìä –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: <b>0</b>
‚Ä¢ üìâ –°—Ä–µ–¥–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>
‚Ä¢ üìà –¢—Ä–µ–Ω–¥: <i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</i>

<b>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>

–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è.

<b>üöÄ –ù–∞–∂–º–∏—Ç–µ "ü©∫ –ò–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ" –¥–ª—è –Ω–∞—á–∞–ª–∞!</b>
        """
        
        await update.message.reply_text(
            status_text, 
            parse_mode='HTML',
            reply_markup=self.get_persistent_keyboard()
        )
        

        

        
    async def handle_webapp_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App"""
        user = update.effective_user
        data = update.effective_message.web_app_data.data
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App
            webapp_data = json.loads(data)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {webapp_data}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if 'pressure' in webapp_data:
                pressure_data = webapp_data['pressure']
                systolic = pressure_data.get('systolic', 'N/A')
                diastolic = pressure_data.get('diastolic', 'N/A')
                category = pressure_data.get('category', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
                
                result_text = f"""
üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è</b>

<b>üìà –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>

‚Ä¢ üíì <b>–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ</b> (–≤–µ—Ä—Ö–Ω–µ–µ): <b>{systolic} –º–º —Ä—Ç.—Å—Ç.</b>
‚Ä¢ üíô <b>–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ</b> (–Ω–∏–∂–Ω–µ–µ): <b>{diastolic} –º–º —Ä—Ç.—Å—Ç.</b>
‚Ä¢ üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> <i>{category}</i>

<b>‚è∞ –í—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

<b>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>

{self.get_pressure_recommendations(systolic, diastolic)}

<b>üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π</b>
                """
                
                await update.message.reply_text(
                    result_text, 
                    parse_mode='HTML',
                    reply_markup=self.get_persistent_keyboard()
                )
                
            elif webapp_data.get('action') == 'webapp_closed':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª Web App
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–∫—Ä—ã–ª Web App")
                await update.message.reply_text(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
                    reply_markup=self.get_persistent_keyboard()
                )
                
            else:
                # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App!\n\n"
                    f"–î–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é.",
                    reply_markup=self.get_persistent_keyboard()
                )
                
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {data}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.get_persistent_keyboard()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Web App –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.get_persistent_keyboard()
            )
            
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.lower()
        
        if "–¥–∞–≤–ª–µ–Ω–∏–µ" in text or "–∏–∑–º–µ—Ä–∏—Ç—å" in text:
            await self.measure_command(update, context)
        elif "–∏—Å—Ç–æ—Ä–∏—è" in text:
            await self.status_command(update, context)
        else:
            # –î–ª—è –ª—é–±–æ–≥–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            await update.message.reply_text(
                "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n"
                "‚Ä¢ '–∏–∑–º–µ—Ä–∏—Ç—å' - –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞–≤–ª–µ–Ω–∏—è\n"
                "‚Ä¢ '–∏—Å—Ç–æ—Ä–∏—è' - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏",
                reply_markup=self.get_persistent_keyboard()
            )
            

        
    def get_pressure_recommendations(self, systolic, diastolic):
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–≤–ª–µ–Ω–∏—é"""
        try:
            sys_val = int(systolic)
            dia_val = int(diastolic)
            
            if sys_val < 90 and dia_val < 60:
                return "‚Ä¢ –ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞"
            elif sys_val < 120 and dia_val < 80:
                return "‚Ä¢ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏"
            elif sys_val < 130 and dia_val < 80:
                return "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ - —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—Ä–∞–∑–æ–º –∂–∏–∑–Ω–∏"
            elif sys_val < 140 and dia_val < 90:
                return "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å"
            elif sys_val < 160 and dia_val < 100:
                return "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤—Ä–∞—á—É"
            elif sys_val < 180 and dia_val < 110:
                return "‚Ä¢ –í—ã—Å–æ–∫–∞—è –≥–∏–ø–µ—Ä—Ç–µ–Ω–∑–∏—è - —Å—Ä–æ—á–Ω–æ –∫ –≤—Ä–∞—á—É"
            else:
                return "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–π—Ç–µ —Å–∫–æ—Ä—É—é!"
        except:
            return "‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
            

        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ '–¢–æ–Ω–æ–º–µ—Ç—Ä'...")
        print(f"üåê Web App URL: {WEBAPP_URL}")
        print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print("üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç... –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            self.application.run_polling(allowed_updates=Update.ALL_TYPES)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü©∫ Telegram –ë–æ—Ç '–¢–æ–Ω–æ–º–µ—Ç—Ä'")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print("WEBAPP_URL=http://localhost:8000/video_recorder.html")
        return
        
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = TonometerBot()
    bot.run()

if __name__ == '__main__':
    main()
